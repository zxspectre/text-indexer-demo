/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package text.indexer.demo

import kotlinx.coroutines.delay
import kotlinx.coroutines.runBlocking
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import text.indexer.demo.lib.IndexerServiceFactory
import text.indexer.demo.lib.impl.IndexerService
import java.util.concurrent.TimeoutException
import kotlin.test.Test
import kotlin.test.assertEquals

private val log: Logger = LoggerFactory.getLogger(SimpleTest::class.java)

class SimpleTest {

    suspend fun waitForCondition(timeoutMillis: Long, condition: () -> Boolean) {
        val startTime = System.currentTimeMillis()
        while (!condition() && System.currentTimeMillis() - startTime < timeoutMillis) {
            delay(100)
        }
        if (!condition()) {
            throw TimeoutException("Condition not met within timeout")
        }
    }

    suspend fun waitForIndexationToFinish(indexerService: IndexerService) {
        log.debug("Waiting for indexation to finish")
        waitForCondition(5000) {
            indexerService.getInprogressFiles() == 0 && indexerService.getIndexedWordsCnt() > 0
        }
        log.debug("Done waiting")
    }


    @Test
    fun appHasAGreeting() {
        runBlocking {
            IndexerServiceFactory.wordExtractingIndexerService().use {
                it.index("src/test/resources/testfiles")
                waitForIndexationToFinish(it)
                assertEquals(238, it.getIndexedWordsCnt(), "Total words indexed")
                val OrwellFiles = it.search("Orwell")
                assertEquals(1, OrwellFiles.size, "one file has Orwell in it")
                assertEquals("src/test/resources/testfiles/small.rtf", OrwellFiles.first())
            }
        }
    }
}
