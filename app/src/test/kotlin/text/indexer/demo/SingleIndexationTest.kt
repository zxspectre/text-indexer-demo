/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package text.indexer.demo

import kotlinx.coroutines.delay
import kotlinx.coroutines.runBlocking
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import text.indexer.demo.lib.IndexerServiceFactory
import text.indexer.demo.lib.impl.IndexerService
import kotlin.test.Test
import kotlin.test.assertEquals

private val log: Logger = LoggerFactory.getLogger(SingleIndexationTest::class.java)

open class SingleIndexationTest {

    companion object {
        suspend fun waitForCondition(timeoutMillis: Long, condition: () -> Boolean) {
            val startTime = System.currentTimeMillis()
            while (!condition() && System.currentTimeMillis() - startTime < timeoutMillis) {
                delay(100)
            }
            if (!condition()) {
                log.warn("Condition not met within timeout")
            }
        }

        /**
         * Only works for waiting for initial indexation.
         */
        suspend fun waitForIndexationToFinish(indexerService: IndexerService) {
            waitForCondition(5000) {
                indexerService.getInprogressFiles() == 0 && indexerService.getIndexedWordsCnt() > 0
            }
        }

        suspend fun waitForIndexToBeEmpty(indexerService: IndexerService) {
            waitForCondition(5000) {
                indexerService.getInprogressFiles() == 0 && indexerService.getIndexedWordsCnt() == 0
            }
        }
    }


    @Test
    fun testSimpleIndexationForDefaultIndexer() {
        simpleIndexation_(IndexerServiceFactory.wordExtractingIndexerService())
    }

    @Test
    fun testSimpleIndexationForLambdaIndexer() {
        val regex = Regex("[\\p{Punct}\\s]++")
        simpleIndexation_(IndexerServiceFactory.lambdaTokenizerIndexerService { s: String -> s.splitToSequence(regex) })
    }

    @Test
    fun testSimpleIndexationForDelimitedIndexer() {
        simpleIndexation_(IndexerServiceFactory.delimiterBasedIndexerService("""[\p{Punct}\s]+"""))
    }

    @Test
    fun testSimpleIndexationForDelimitedWithLambdaIndexer() {
        val regex = Regex("[\\p{Punct}\\s]++")
        simpleIndexation_(
            IndexerServiceFactory.lambdaTokenizerWithCustomLinesIndexerService(
                "\n",
                { s: String -> s.splitToSequence(regex) })
        )
    }


    fun simpleIndexation_(indexerService: IndexerService) {
        runBlocking {
            indexerService.use {
                it.index("src/test/resources/testfiles")
                waitForIndexationToFinish(it)
                assertEquals(238, it.getIndexedWordsCnt(), "Total words indexed")
                val OrwellFiles = it.search("Orwell")
                assertEquals(1, OrwellFiles.size, "one file has Orwell in it")
                assertEquals("src/test/resources/testfiles/small.rtf", OrwellFiles.first())
                it.unindex("src/test/resources/testfiles")
                waitForCondition(3000) {
                    it.getIndexedWordsCnt() == 0
                }
                assertEquals(0, it.search("Orwell").size)
            }
        }
    }

    @Test
    fun simpleTwoInstances() {
        runBlocking {
            val indexerService1 = IndexerServiceFactory.wordExtractingIndexerService()
            val indexerService2 = IndexerServiceFactory.wordExtractingIndexerService()
            try {
                // index two files in two instances
                indexerService1.index("src/test/resources/testfiles/ipsum.rtf")
                indexerService2.index("src/test/resources/testfiles/small.rtf")
                // wait for indexation
                waitForIndexationToFinish(indexerService1)
                waitForIndexationToFinish(indexerService2)
                // search for a word
                val files1 = indexerService1.search("et")
                val files2 = indexerService2.search("et")
                // asserts
                assertEquals(31, indexerService1.getIndexedWordsCnt())
                assertEquals(208, indexerService2.getIndexedWordsCnt())
                assertEquals(1, files1.size)
                assertEquals(1, files2.size)
                assertEquals("src/test/resources/testfiles/ipsum.rtf", files1.first())
                assertEquals("src/test/resources/testfiles/small.rtf", files2.first())
                // remove files from index of one instance
                indexerService2.unindex("src/test/resources/testfiles/small.rtf")
                waitForCondition(5000) {
                    indexerService2.getIndexedWordsCnt() == 0
                }
                // check that only one instance was affected
                assertEquals(1, indexerService1.search("et").size)
                assertEquals(0, indexerService2.search("et").size)
            } finally {
                indexerService1.close()
                indexerService2.close()
            }
        }
    }
}
